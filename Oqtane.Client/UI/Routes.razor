@namespace Oqtane.UI
@using Microsoft.AspNetCore.Http
@inject IInstallationService InstallationService
@inject IJSRuntime JSRuntime
@inject SiteState SiteState

@if (_initialized)
{
    @if (!_installation.Success)
    {
        <Installer />
    }
    else
    {
        @if (string.IsNullOrEmpty(_installation.Message))
        {
            <div style="@_display">
                <CascadingValue Value="@PageState">
                    <SiteRouter RenderMode="@RenderMode" Runtime="@Runtime" VisitorId="@VisitorId" OnStateChange="@ChangeState" />
                </CascadingValue>
            </div>
        }
        else
        {
            <div class="app-alert">
                @_installation.Message
            </div>
        }
    }
}

@code {
    [Parameter]
    public string AntiForgeryToken { get; set; }

    [Parameter]
    public string RenderMode { get; set; }

    [Parameter]
    public string Runtime { get; set; }

    [Parameter]
    public int VisitorId { get; set; }

    [Parameter]
    public string RemoteIPAddress { get; set; }

    [Parameter]
    public string AuthorizationToken { get; set; }

    [CascadingParameter]
    HttpContext HttpContext { get; set; }

    private bool _initialized = false;
    private string _display = "";
    private Installation _installation = new Installation { Success = false, Message = "" };

    private PageState PageState { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        if (RenderMode == RenderModes.Interactive)
        {
            _display = "display: none;";
        }

        SiteState.RemoteIPAddress = RemoteIPAddress;
        SiteState.AntiForgeryToken = AntiForgeryToken;
        SiteState.AuthorizationToken = AuthorizationToken;
        SiteState.IsPrerendering = (HttpContext != null) ? true : false;

        _installation = new Installation { Success = true };
        SiteState.Alias = new Alias { AliasId = 1, SiteId = 1, TenantId = 1, Name = "localhost:44357", IsDefault = true, BaseUrl = "", Protocol = "http://" };
        // _installation = await InstallationService.IsInstalled();
        // if (_installation.Alias != null)
        // {
        //     SiteState.Alias = _installation.Alias;
        // }
        _initialized = true;
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            // prevents flash on initial interactive page load
            _display = "";
            StateHasChanged();
        }
    }

    private void ChangeState(PageState pageState)
    {
        PageState = pageState;
        StateHasChanged();
    }
}
